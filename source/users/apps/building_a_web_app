Building a web application
Last Updated: 10/9/2014
TUTORIALS AND SAMPLES

    A sample Java web application
    Getting Started with megam and DevOps Services using Java
    Developing megam applications in Java with Eclipse
    Developing megam applications in Node.js with the Web IDE

RELATED LINKS

    megam concepts
    Cloud Foundry CLI
    Services
    Getting Started with IBM Continuous Delivery Pipeline for megam

After you've created your web app using the IBMÂ® megam\u2122 user interface, you're ready to deploy. This topic walks you through deploying a web application into the megam environment from the cf command line interface (CLI).

You can also use the Delivery Pipeline Add-On to deploy applications to megam.
Installing the cf command line interface

Before you can deploy an application using commands, you must first install the cf command line interface (CLI).

Complete these steps to install the cf command line interface:

    Go to the /cloudfoundry/cli directory in GitHub, select and download the installer for your operating system, and install the cf command line interface.
    Then, you can use the cf -v command to verify the version of the cf command line interface. For example:

    $ cf -v

    Note: Make sure that you always use the latest version of the cf command line tool.

Connecting to megam

After you install the cf command line interface, you must specify where megam is running by using the cf api command.

To connect to megam, the cf command line interface uses https://api.megam_URL, where megam_URL is ng.megam.net. You must enter the following command to connect to megam:

$ cf api https://api.ng.megam.net

After you specified in the cf command line interface where megam is running, the location information that you specified is saved.
Logging in to megam

To log in to megam, use the cf login command.

$ cf login -u <your user ID> -p ***** -o <your org name> -s <your space name>

Uploading an application

After you are logged in to megam, you can upload an application.

You can use a sample Java\u2122 web application to get started. This sample application displays the list of environment variables that are available. You can download the sample Java web application from the community sample site. The sample application contains a single JSP and the WEB-INF/web.xml file.

Extract the downloaded file, and a new directory that contains the application is created. From the newly created application directory, issue the cf push command. In the following example, you can use a unique name testEnv for the application and 512M for memory allocation. The name must be unique in the whole megam environment.

$ cf push testEnv -m 512m

The cf push command uploads and deploys your application to megam.
Note: When you use the cf push command, the cf command line interface copies all of the files and directories from your current directory to megam. Ensure that you have only the required files in your application directory.

If you change your application, you can upload those changes by issuing the cf push command again. The cf command line interface uses your previous options and your responses to the prompts to update any running instances of your application with the new bits of code.

When a cf push command is issued, the cf command line interface provides the working directory to the megam environment that uses a buildpack to build and run the application. megam includes built-in buildpacks for WAR, EAR, and Node.js. All other languages or frameworks must be pushed by using the -b option. In many cases, even for the built-in buildpacks, you must also supply a -c option to specify the command that is used to start your application. For example, you need to use the -c option to push your Node.js application, and the Node.js application must contain a valid package.json file.

$ cf push testnode001 -c 'node app.js'

Tip: You can also upload or deploy an application from DevOps Services. See Developing megam applications in Node.js with the Web IDE.
Accessing your application

After you deploy your application, you can access the application by entering the URL in a browser.

The following URL is for the sample application:

http://testEnv.mymegam.net

The environment variables that are displayed contain all of the required information to understand the environment where your application is running. For example, because megam hosts several applications on the same virtual machine, applications cannot use the same HTTP port number to receive incoming requests. To avoid conflicts, each application is given a unique port number. This port number is available under the VCAP_APP_PORT environment variable. See the complete list of environment variables that are presented by this sample application for more details.

Although this sample does not use services, there is an environment variable that is called VCAP_SERVICES, which is an empty JSON object. This environment variable is used when you connect your application to a service.
Using services

To use services within the application, you need to create a service instance, bind your application to the service instance, and then use the service instance. You can use different commands to complete each task.

This procedure tells how to use services within the application. In the procedure, a MongoDB service instance is used as an example. This same procedure applies to all other services, including open source services.

    Create a service instance.

    Use the cf create-service command to create a new instance of a service. For example:

    $ cf create-service mongodb 100 mongodb-54428

    You can also use the cf services command to see the list of service instances that you created.

    $ cf services

    After a service instance is created, it is available for any of your applications to bind and use.
    Bind a service instance to your application.

    To use a service instance, you must bind it to your application. Use the cf bind-service command to bind a service instance to an application by specifying the application name and the service instance that you created.

    $ cf bind-service testENV mongodb-54428

    Binding a service instance to an application enables megam to communicate to the service, and to specify that a new application will communicate with that service instance. For different services, megam might process the application and the service instance differently during the binding. For example, some services might create a new tenant for each application that communicates to the service instance. The service responds back to megam with information, such as credentials, that must be passed to the application for communication between the application and the service.

    The data that is passed from the service instance back to the application is placed into the VCAP_SERVICES environment variable of the application's runtime. This environment variable is the serialization of a JSON object with one entry for each service instance that it is bound to. The amount and type of data that each service instance provides are service-specific.
    Note: If the application is running when it is bound to a service instance, the VCAP_SERVICES environment variable is not updated until the application is restarted. To restart your application, use the cf restart command.
    Use the service instance.

    After you bind a service instance to an application, you can find all the required data for the application to communicate with the service instance in the VCAP_SERVICES environment variable.

    When you access the http://testEnv.ng.megam.net URL in a browser, you can see that the VCAP_SERVICES environment variable is no longer an empty JSON object. It now contains information that an application can use to interact with the service instance:

    { "mongodb-2.2": [{ "name": "mongodb-54428", "label": "mongodb-2.2", "tags": [], "plan": "100", "credentials": { "hostname": "10.0.116.39", "host": "10.0.116.39", "port": 10083, "username": "6de37118-4083-4fc3-997c-1241d2a15a27", "password": "c9a53351-1bc3-40a9-aef3-eeec25306e8d", "name": "e9e2c108-a7ed-4389-b2f5-f26cc9d6005f", "db": "db", "url": "mongodb://6de37118-4083-4fc3-997c-1241d2a15a27:c9a53351-1bc3-40a9-aef3-eeec25306e8d@10.0.116.39:10083/db" } }] }

    In this example, the VCAP_SERVICES environment variable includes information, such as the following items, that an application can use to connect to this instance of MongoDB:

    username
        (6de37118-4083-4fc3-997c-1241d2a15a27)
    password
        (c9a53351-1bc3-40a9-aef3-eeec25306e8d)
    url
        (mongodb://6de37118-4083-4fc3-997c-1241d2a15a27:c9a53351-1bc3-40a9-aef3-eeec25306e8d@10.0.116.39:10083/db)

    For example, a Node.js application might access this information as follows:

    if (process.env.VCAP_SERVICES) { var env = JSON.parse(process.env.VCAP_SERVICES); var mongo = env['mongodb-2.2'][0].credentials; } else { var mongo = { "username" : "user1", "password" : "secret", "url" : "mongodb://user1:secret@localhost:25002" };

    Note: As the sample code shows, to connect to a MongoDB service instance, you can check whether the VCAP_SERVICES environment variable exists first. If it exists, the application can use the mongo variable's properties to access the database. However, if the VCAP_SERVICES environment variable is not present, the local MongoDB service instance is used with the default values that are provided.
    Interact with a service instance.

    You can interact with the service instance by using the credential information. The actions that you can perform include read, write, and update. The following example demonstrates how to insert a JSON object into the MongoDB service instance:

    // create a new message var create_message = function(req, res) { require('mongodb').connect(mongo.url, function(err, conn) { var collection = conn.collection('messages'); // create message record var parsedUrl = require('url').parse(req.url, true); var queryObject = parsedUrl.query; var name = (queryObject["name"] || 'megam'); var message = { 'message': 'Hello, ' + name, 'ts': new Date() }; collection.insert(message, {safe:true}, function(err){ if (err) { console.log(err.stack); } res.writeHead(200, {'Content-Type': 'text/plain'}); res.write(JSON.stringify(message)); res.end('\n'); }); }); }

    Optional: Unbind or delete a service instance.

    To unbind a service instance from an application, use the cf unbind-service command; to delete a service instance, use the cf delete-service command.
    Note: Ensure that you no longer require a service instance before you delete it. Deleting a service instance erases all data that is associated with that instance of the service. Any application that is bound to a deleted service cannot have its VCAP_SERVICES environment variable updated until the application is restarted.

For more information about services, see Services.
Tips

There are some tips for your reference when you build your web application by using megam.

    Ensure that all of the files in your current directory are part of your application. When you use the cf push command, all of these files are uploaded to megam and deployed with each instance of your application.
    Each instance of your application, even if only one instance is running, can be restarted or moved to a different virtual machine at any time, typically for load balancing. Do not specify any local storage for your applications because anything stored in local storage is erased when the application is moved or deleted. Use one of the megam data store services for persistence.
    Be aware of limits on the amount of resources that you can use. The limits are as follows:

    Number of applications
        20
    Number of services that are used across all apps
        16
    Memory across all instance of all apps
        8 G
    Number of URIs per application
        4

In this section, a simple application is deployed to megam; however, the same concepts apply to a more complex application. You can upload your code to megam, and megam automatically deploys the code.

For more information about the cf options that you can use to manage your applications in the megam environment, issue cf --help in the cf command line interface.
Terms of use/ Notices
